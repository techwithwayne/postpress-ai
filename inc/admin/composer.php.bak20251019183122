<?php
/**
 * CHANGE LOG
 * 2025-10-19T - created full safe composer admin UI to replace missing code.
 * - Minimal, non-fatal admin page for PostPress AI composer.
 * - Includes debug logging and nonces.
 *
 * Notes:
 * - Marked edited/debug lines with // CHANGED:
 * - Do not include secrets or keys here.
 * - This file is intentionally minimal so it won't cause a fatal admin page.
 */

/** Exit if accessed directly. */
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

// CHANGED: Add debug log at load
error_log( 'PPA: composer.php loaded at ' . date( 'c' ) ); // CHANGED:

// Capability check
if ( ! current_user_can( 'edit_posts' ) ) {
    // CHANGED: Safe notice for insufficient capability
    echo '<div class="notice notice-error"><p>Insufficient permissions to access PostPress AI composer.</p></div>'; // CHANGED:
    return;
}

// Prepare nonce for AJAX calls (frontend JS should use this if needed)
$ppa_nonce = wp_create_nonce( 'ppa_composer_action' ); // CHANGED:
?>
<div id="ppa-composer" class="ppa-composer" style="background:#121212;color:#fff;padding:18px;border-radius:6px;">
    <style>
        /* Minimal inline styles as defensive fallback — main styles should live in assets/css/admin.css */
        .ppa-composer label{display:block;margin:8px 0 4px;font-weight:600;}
        .ppa-composer input[type="text"], .ppa-composer select, .ppa-composer input[type="number"], .ppa-composer textarea{
            width:100%;padding:8px;border-radius:4px;border:1px solid #333;background:#0f0f0f;color:#fff;
        }
        .ppa-composer .ppa-actions{margin-top:12px;display:flex;gap:8px;align-items:center;}
        .ppa-composer .ppa-btn{background:#ff6c00;color:#121212;padding:8px 12px;border-radius:6px;border:none;cursor:pointer;}
        .ppa-composer .ppa-btn.secondary{background:#222;color:#fff;border:1px solid #333;}
        .ppa-composer .ppa-note{font-size:13px;color:#bbb;margin-top:8px;}
        #ppa-preview-pane{margin-top:18px;padding:18px;background:#fff;color:#121212;border-radius:6px;min-height:120px;}
    </style>

    <?php
    // CHANGED: Nonce field for JS-driven requests (prints hidden input for graceful degradation)
    printf( '<input type="hidden" id="ppa-nonce" value="%s" />', esc_attr( $ppa_nonce ) ); // CHANGED:
    ?>

    <label for="ppa-subject">Subject / Title</label>
    <input id="ppa-subject" name="ppa_subject" type="text" placeholder="e.g. 5 ways to improve your website speed" value="" />

    <label for="ppa-tone">Tone</label>
    <select id="ppa-tone" name="ppa_tone">
        <option value="casual">Casual</option>
        <option value="professional">Professional</option>
        <option value="friendly">Friendly</option>
    </select>

    <label for="ppa-wordcount">Approx. word count</label>
    <input id="ppa-wordcount" name="ppa_wordcount" type="number" min="50" max="4000" step="50" value="300" />

    <label for="ppa-subject-extra">Optional brief / instructions</label>
    <textarea id="ppa-subject-extra" name="ppa_subject_extra" rows="4" placeholder="Add more details for the AI (audience, local keywords like 'Iowa', etc.)"></textarea>

    <div class="ppa-actions">
        <button id="ppa-preview-btn" class="ppa-btn" type="button">Preview</button>
        <button id="ppa-store-btn" class="ppa-btn secondary" type="button">Store (Draft)</button>
        <span class="ppa-note">Preview uses the Django backend. Store will send a draft to the configured target sites.</span>
    </div>

    <div id="ppa-preview-pane" class="ppa-preview-pane" aria-live="polite">
        <h4 style="margin-top:0;">Preview</h4>
        <p style="margin:0;color:#666;">No preview yet. Click <strong>Preview</strong> to request a preview from the Django service.</p>
    </div>
</div>

<script>
/* Minimal defensive JS that wires the buttons to AJAX calls.
   For robust behavior, place full code inside assets/js/admin.js and enqueue it properly.
*/

// CHANGED: Inline bootstrap logger (defensive)
console.info('PPA: composer.php inline bootstrap initialized'); // CHANGED:

(function(){
    const previewBtn = document.getElementById('ppa-preview-btn');
    const storeBtn = document.getElementById('ppa-store-btn');
    const previewPane = document.getElementById('ppa-preview-pane');

    function getPayload() {
        return {
            subject: document.getElementById('ppa-subject').value || '',
            tone: document.getElementById('ppa-tone').value || 'casual',
            word_count: parseInt(document.getElementById('ppa-wordcount').value, 10) || 300,
            extra: document.getElementById('ppa-subject-extra').value || '',
        };
    }

    previewBtn && previewBtn.addEventListener('click', function(){
        console.info('PPA: Preview button clicked'); // CHANGED:
        const payload = getPayload();
        previewPane.innerHTML = '<p style="color:#666">Requesting preview…</p>';
        fetch('https://apps.techwithwayne.com/postpress-ai/preview/', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // CHANGED: X-PPA-Key header must be set by server-side code or by preconfigured env on server.
                // Do not set X-PPA-Key here in client-side code — server expects it on Django side.
            },
            body: JSON.stringify(payload)
        }).then(function(resp){
            if (!resp.ok) throw new Error('Network response was not ok');
            return resp.json();
        }).then(function(json){
            try {
                if (json && json.html) {
                    previewPane.innerHTML = json.html;
                } else if (json && json.result && json.result.html) {
                    previewPane.innerHTML = json.result.html;
                } else {
                    previewPane.innerHTML = '<pre style="white-space:pre-wrap;color:#666;">' + JSON.stringify(json, null, 2) + '</pre>';
                }
                console.info('PPA: Preview response received'); // CHANGED:
            } catch (e) {
                previewPane.innerHTML = '<p style="color:#c00">Error rendering preview.</p>';
                console.error('PPA: Error parsing preview JSON', e); // CHANGED:
            }
        }).catch(function(err){
            previewPane.innerHTML = '<p style="color:#c00">Preview request failed. See console for details.</p>';
            console.error('PPA: Preview request failed', err); // CHANGED:
        });
    });

    storeBtn && storeBtn.addEventListener('click', function(){
        console.info('PPA: Store (draft) button clicked'); // CHANGED:
        const payload = getPayload();
        // Defensive confirm before posting
        if (!confirm('Send draft to Django store endpoint?')) return;
        fetch('https://apps.techwithwayne.com/postpress-ai/store/', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                title: payload.subject || 'PostPress AI Draft',
                content: '<p>' + (payload.extra || '') + '</p>',
                target_sites: ['draft']
            })
        }).then(function(resp){
            return resp.json();
        }).then(function(json){
            if (json && json.ok) {
                alert('Draft stored successfully.');
                console.info('PPA: Store response ok'); // CHANGED:
            } else {
                alert('Store failed — check console for details.');
                console.error('PPA: Store response', json); // CHANGED:
            }
        }).catch(function(err){
            alert('Store request failed — check console.');
            console.error('PPA: Store request failed', err); // CHANGED:
        });
    });
})();
</script>

<?php
// End of composer.php
// CHANGED: composer.php created/updated.
?>
