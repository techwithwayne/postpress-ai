<?php
/**
 * Plugin Name: PostPress AI
 * Plugin URI:  https://techwithwayne.com/
 * Description: Minimal PostPress AI skeleton (rebuild). Add features file-by-file.
 * Version:     0.1.0
 * Author:      Tech With Wayne
 *
 * CHANGE LOG
 * 2025-10-16 — CHANGED: Removed inline admin_enqueue_scripts anonymous hook to avoid duplicate enqueues.
 * 2025-10-16 — CHANGED: Enqueue responsibilities moved to inc/admin/enqueue.php (centralized).
 * 2025-10-16 — CHANGED: Added robust file-exists guards for includes and lightweight AJAX stubs.
 */

// Prevent direct access
defined( 'ABSPATH' ) || exit; // CHANGED: security hardening

// Constants
if ( ! defined( 'PPA_PLUGIN_DIR' ) ) {
    define( 'PPA_PLUGIN_DIR', plugin_dir_path( __FILE__ ) ); // CHANGED: ensure constant exists
}
if ( ! defined( 'PPA_PLUGIN_URL' ) ) {
    define( 'PPA_PLUGIN_URL', plugin_dir_url( __FILE__ ) ); // CHANGED: ensure constant exists
}

// Light debug to help with server-side verification
if ( function_exists( 'error_log' ) ) {
    error_log( 'PPA: postpress-ai plugin loaded (PPA_PLUGIN_DIR=' . PPA_PLUGIN_DIR . ')' ); // CHANGED: debug log
}

// Include helpers and AJAX handlers (if present) — guarded includes to avoid fatal errors
if ( file_exists( PPA_PLUGIN_DIR . 'inc/helpers.php' ) ) {
    require_once PPA_PLUGIN_DIR . 'inc/helpers.php'; // CHANGED:
} else {
    error_log( 'PPA: helpers.php not found; continuing' ); // CHANGED:
}

if ( file_exists( PPA_PLUGIN_DIR . 'inc/ajax/marker.php' ) ) {
    require_once PPA_PLUGIN_DIR . 'inc/ajax/marker.php'; // CHANGED:
} else {
    # CHANGED: log missing optional ajax handler
    error_log( 'PPA: inc/ajax/marker.php not found; skipping marker include' );
}

if ( file_exists( PPA_PLUGIN_DIR . 'inc/ajax/preview.php' ) ) {
    require_once PPA_PLUGIN_DIR . 'inc/ajax/preview.php'; // CHANGED:
} else {
    error_log( 'PPA: inc/ajax/preview.php not found; preview handler unavailable' ); // CHANGED:
}

if ( file_exists( PPA_PLUGIN_DIR . 'inc/ajax/store.php' ) ) {
    require_once PPA_PLUGIN_DIR . 'inc/ajax/store.php'; // CHANGED:
} else {
    error_log( 'PPA: inc/ajax/store.php not found; store handler unavailable' ); // CHANGED:
}

if ( file_exists( PPA_PLUGIN_DIR . 'inc/admin/composer.php' ) ) {
    require_once PPA_PLUGIN_DIR . 'inc/admin/composer.php'; // CHANGED:
} else {
    error_log( 'PPA: inc/admin/composer.php not found; composer UI disabled' ); // CHANGED:
}

# Load admin enqueue helpers (centralized enqueue implementation)
# CHANGED: rely on inc/admin/enqueue.php to register/enqueue and localize scripts to avoid duplicate enqueues
if ( file_exists( PPA_PLUGIN_DIR . 'inc/admin/enqueue.php' ) ) {
    require_once PPA_PLUGIN_DIR . 'inc/admin/enqueue.php'; # CHANGED:
    error_log( 'PPA: inc/admin/enqueue.php loaded' ); # CHANGED:
} else {
    error_log( 'PPA: inc/admin/enqueue.php not found; admin assets will not be registered' ); # CHANGED:
}

# ----------------------------------------------------------------------------- 
# NOTE: inline admin enqueue has been removed in favor of inc/admin/enqueue.php.
# If you prefer inline enqueuing, remove the enqueue include above and restore the inline block.
# -----------------------------------------------------------------------------

# ---------- 
# AJAX handlers (minimal safe stubs if external handler functions are present)
# These call into namespaced handlers when available (PPA\Ajax\*), otherwise respond with a helpful error.
# ----------
add_action( 'wp_ajax_ppa_preview', function() {
    # CHANGED: Expecting JSON or form-encoded POST; use nonce named 'ppa_admin_nonce' consistently.
    $nonce = isset( $_POST['_wpnonce'] ) ? sanitize_text_field( wp_unslash( $_POST['_wpnonce'] ) ) : '';
    if ( ! wp_verify_nonce( $nonce, 'ppa_admin_nonce' ) ) {
        wp_send_json( array( 'ok' => false, 'error' => 'invalid-nonce' ) );
    }

    if ( function_exists( 'PPA\\Ajax\\generate_preview' ) ) {
        $res = call_user_func( 'PPA\\Ajax\\generate_preview', $_POST );
        if ( is_wp_error( $res ) ) {
            wp_send_json( array( 'ok' => false, 'error' => $res->get_error_code(), 'message' => $res->get_error_message() ) );
        }
        wp_send_json( $res );
    } else {
        wp_send_json( array( 'ok' => false, 'error' => 'missing-handler-generate_preview' ) );
    }
} ); # CHANGED: ajax preview stub

add_action( 'wp_ajax_ppa_save_draft', function() {
    $nonce = isset( $_POST['_wpnonce'] ) ? sanitize_text_field( wp_unslash( $_POST['_wpnonce'] ) ) : '';
    if ( ! wp_verify_nonce( $nonce, 'ppa_admin_nonce' ) ) {
        wp_send_json( array( 'ok' => false, 'error' => 'invalid-nonce' ) );
    }

    if ( function_exists( 'PPA\\Ajax\\save_draft' ) ) {
        $res = call_user_func( 'PPA\\Ajax\\save_draft', $_POST );
        wp_send_json( $res );
    } else {
        wp_send_json( array( 'ok' => false, 'error' => 'missing-handler-save_draft' ) );
    }
} ); # CHANGED: ajax save draft stub

# Composer page callback (kept minimal — actual rendering is in inc/admin/composer.php)
# Health check for WP-CLI and external automation
function ppa_health_check() {
    return array(
        'ok'      => true,
        'plugin'  => 'postpress-ai',
        'message' => 'skeleton loaded',
    );
} # CHANGED: lightweight health check
