/**
 * CHANGE LOG
 * 2025-10-19 — Fix ESLint warnings (no-unused-vars):                       // CHANGED:
 *   - Remove unused /* global ajaxurl *\/ directive.                        // CHANGED:
 *   - Use optional catch binding where error object is unused.              // CHANGED:
 * 2025-10-19 — Admin JS for PostPress AI composer:
 *   - Wires Preview, Save Draft, Publish to WP AJAX.
 *   - Robust handling of varied JSON shapes from backend.
 *   - Uses window.ajaxurl (WP admin) with same-origin fetch.
 *   - Sends X-PPA-Nonce from hidden #ppa-nonce when present.
 */

(() => {
  "use strict";

  // Resolve admin-ajax endpoint (WP sets window.ajaxurl in admin)
  const AJAX_URL =
    (typeof window !== "undefined" && typeof window.ajaxurl === "string" && window.ajaxurl) ||
    "/wp-admin/admin-ajax.php";

  // Utility: log with namespace
  const log = (...args) => console.info("PPA:", ...args); // CHANGED:

  // Grab elements (defensive null checks below)
  const $ = (id) => document.getElementById(id);
  const elSubject = $("ppa-subject");
  const elGenre = $("ppa-genre");
  const elTone = $("ppa-tone");
  const elWordCount = $("ppa-wordcount");
  const elExtra = $("ppa-subject-extra");
  const elPreview = $("ppa-preview-btn");
  const elSave = $("ppa-save-btn");
  const elPublish = $("ppa-publish-btn");
  const elPane = $("ppa-preview-pane");
  const elNonce = $("ppa-nonce");

  // If composer wrapper doesn't exist, noop (not our screen)
  const composerRoot = $("ppa-composer");
  if (!composerRoot) {
    log("admin.js loaded but composer root not found; noop");
    return;
  }

  log("admin.js initialized");

  // Gather payload from inputs (trim strings; coerce number)
  function getPayload() {
    const wc = parseInt((elWordCount && elWordCount.value) || "300", 10);
    return {
      subject: (elSubject && elSubject.value.trim()) || "",
      genre: (elGenre && elGenre.value) || "",
      tone: (elTone && elTone.value) || "friendly",
      word_count: Number.isFinite(wc) ? wc : 300,
      extra: (elExtra && elExtra.value.trim()) || "",
    };
  }

  // Robust JSON parsing: supports {success:true,data:{html}}, {ok:true,html}, {html:""}
  function extractHTML(json) {
    if (!json) return "";
    if (typeof json.html === "string") return json.html;
    if (json.result && typeof json.result.html === "string") return json.result.html;
    if (json.data && typeof json.data.html === "string") return json.data.html;
    if (typeof json.content === "string") return json.content;
    if (typeof json.preview === "string") return json.preview;
    return "";
  }

  async function callAjax(action, body) {
    const headers = { "Content-Type": "application/json" };
    // Send our custom nonce header if present (server should validate)
    if (elNonce && elNonce.value) headers["X-PPA-Nonce"] = elNonce.value;

    const res = await fetch(`${AJAX_URL}?action=${encodeURIComponent(action)}`, {
      method: "POST",
      credentials: "same-origin",
      headers,
      body: JSON.stringify(body || {}),
    });

    // Try JSON; if fails, throw text for better error display
    const text = await res.text();
    try {
      return JSON.parse(text);
    } catch {
      throw new Error(`Non-JSON response from ${action}: ${text.slice(0, 400)}`); // CHANGED:
    }
  }

  // PREVIEW
  elPreview &&
    elPreview.addEventListener("click", async () => {
      log("Preview clicked");
      const payload = getPayload();
      elPane && (elPane.innerHTML = '<p style="color:#666;margin:0;">Requesting preview…</p>');
      try {
        const json = await callAjax("ppa_preview", payload);
        const html = extractHTML(json);
        if (html) {
          elPane.innerHTML = html;
          log("Preview updated");
        } else {
          elPane.innerHTML =
            '<div class="notice notice-error"><p>No preview HTML in response.</p></div>';
          log("Preview response did not contain html", json);
        }
      } catch (err) {
        elPane &&
          (elPane.innerHTML =
            '<div class="notice notice-error"><p>Preview failed. Check console for details.</p></div>');
        console.error("PPA: Preview error", err);
      }
    });

  // SAVE DRAFT
  elSave &&
    elSave.addEventListener("click", async () => {
      log("Save Draft clicked");
      const payload = getPayload();
      try {
        const json = await callAjax("ppa_store", {
          title: payload.subject || "Untitled",
          content:
            (elPane && elPane.innerHTML) ||
            (payload.extra ? `<p>${payload.extra}</p>` : "<p></p>"),
          status: "draft",
          meta: { genre: payload.genre, tone: payload.tone, word_count: payload.word_count },
        });
        // Accept shapes: {ok:true,id}, {success:true,data:{id}}, etc.
        const ok = json && (json.ok === true || json.success === true);
        const id = (json && (json.id || (json.data && json.data.id))) || "N/A";
        if (ok) {
          alert(`Draft saved successfully. Post ID: ${id}`);
          log("Save Draft OK", json);
        } else {
          alert("Save failed — see console.");
          console.error("PPA: Save Draft unexpected response", json);
        }
      } catch (err) {
        alert("Save request failed — see console.");
        console.error("PPA: Save Draft error", err);
      }
    });

  // PUBLISH (uses same store endpoint with status publish, if supported)
  elPublish &&
    elPublish.addEventListener("click", async () => {
      log("Publish clicked");
      const payload = getPayload();
      if (!confirm("Publish now?")) return;
      try {
        const json = await callAjax("ppa_store", {
          title: payload.subject || "Untitled",
          content:
            (elPane && elPane.innerHTML) ||
            (payload.extra ? `<p>${payload.extra}</p>` : "<p></p>"),
          status: "publish",
          meta: { genre: payload.genre, tone: payload.tone, word_count: payload.word_count },
        });
        const ok = json && (json.ok === true || json.success === true);
        const id = (json && (json.id || (json.data && json.data.id))) || "N/A";
        if (ok) {
          alert(`Published successfully. Post ID: ${id}`);
          log("Publish OK", json);
        } else {
          alert("Publish failed — see console.");
          console.error("PPA: Publish unexpected response", json);
        }
      } catch (err) {
        alert("Publish request failed — see console.");
        console.error("PPA: Publish error", err);
      }
    });
})();
